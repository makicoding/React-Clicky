{"version":3,"sources":["components/Navbar/index.js","components/Grid/index.js","pages/CheckingAccount.js","pages/SavingsAccount.js","App.js","serviceWorker.js","index.js"],"names":["Navbar","react_default","a","createElement","className","react_router_dom","to","window","location","pathname","Container","_ref","fluid","children","Row","_ref2","Col","_ref3","size","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleButtonClick1","setState","count","state","amount1","handleButtonClick2","amount2","handleButtonClick3","amount3","handleButtonClick4","amount4","document","getElementsByClassName","innerHTML","concat","style","color","components_Navbar","onClick","React","Component","react_router","exact","path","component","CheckingAccount","SavingsAccount","Boolean","hostname","match","ReactDOM","render","src_App","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.1e14d238.chunk.js","sourcesContent":["import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport \"./style.css\";\n\n// Depending on the current path, this component sets the \"active\" class on the appropriate navigation link item\nfunction Navbar() {\n  return (\n    <nav className=\"navbar navbar-expand-lg navbar-dark bg-success myNavbar\">\n      <Link className=\"navbar-brand\" to=\"/\">\n        React Clicky\n      </Link>\n      <div>\n        <ul className=\"navbar-nav\">\n          <li className=\"nav-item\">\n            <Link\n              to=\"/\"\n              className={\n                window.location.pathname === \"/\" || window.location.pathname === \"/checking\"\n                  ? \"nav-link active\"\n                  : \"nav-link\"\n              }\n            >\n              Checking\n            </Link>\n          </li>\n          <li className=\"nav-item\">\n            <Link\n              to=\"/savings\"\n              className={window.location.pathname === \"/savings\" ? \"nav-link active\" : \"nav-link\"}\n            >\n              Savings\n            </Link>\n          </li>\n        </ul>\n      </div>\n    </nav>\n  );\n}\n\nexport default Navbar;\n","import React from \"react\";\n\n// Exporting the Container, Row, and Col components from this file\n\n// This Container component allows us to use a bootstrap container without worrying about class names\nexport function Container({ fluid, children }) {\n  return <div className=\"container\">{children}</div>;\n}\n\n// This Row component lets us use a bootstrap row without having to think about class names\nexport function Row({ fluid, children }) {\n  return <div className=\"row\">{children}</div>;\n}\n\n// This Col component lets us size bootstrap columns with less syntax\n// e.g. <Col size=\"col-md-6 offset-md-3\"> instead of <div className=\"col-md-6 offset-md-3\">\nexport function Col({ size, children }) {\n  return (\n    <div\n      className={size}\n    >\n      {children}\n    </div>\n  );\n}\n","import React, { Component } from \"react\";\nimport \"./Global.css\";\nimport Navbar from \"../components/Navbar\";\nimport { Container, Row, Col } from \"../components/Grid\";\n\n// Run \"npm i\" or \"npm i [specific component name]\" if there are any dependencies missing in the node modules folder\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {    // state is an object\n      count: 100,\n      amount1: 1,\n      amount2: 5,\n      amount3: 10,\n      amount4: 20\n    }\n  }\n\n  // The componentDidMount() method is called after the component is rendered.\n  // This is where you would write any javascript to set how the page initially looks.\n  // You can also just use componentDidUpdate and not use componentDidMount() altogether.\n  componentDidMount() {\n    document.getElementsByClassName(\"myCounter\")[0].innerHTML = `You have: $${this.state.count} in your account`;   // We are using a template literal here\n  }\n\n  // The componentDidUpdate method is called after the component is updated in the DOM.\n  // This is where you would write any javascript to make changes to the page such as when a user clicks a button..\n  componentDidUpdate() {\n    document.getElementsByClassName(\"myCounter\")[0].innerHTML = `You have: $${this.state.count} in your account`;   // We are using a template literal here\n    if (this.state.count <= 20) {\n      document.getElementsByClassName(\"message\")[0].innerHTML = \"You are running low in your account\";\n      document.getElementsByClassName(\"message\")[0].style.color = \"red\";\n    }\n    if (this.state.count <= 0) {\n      document.getElementsByClassName(\"myCounter\")[0].innerHTML = \"You have no more money left!\";\n      document.getElementsByClassName(\"myCounter\")[0].style.color = \"red\";\n      document.getElementsByClassName(\"message\")[0].innerHTML = \"\";\n    }\n  }\n\n  // Here we are just declaring a regular javascript function (you can call the function anything you want)\n  handleButtonClick1 = () => {\n    this.setState({count: this.state.count - this.state.amount1})\n  }\n\n  handleButtonClick2 = () => {\n    this.setState({count: this.state.count - this.state.amount2})\n  }\n\n  handleButtonClick3 = () => {\n    this.setState({count: this.state.count - this.state.amount3})\n  }\n\n  handleButtonClick4 = () => {\n    this.setState({count: this.state.count - this.state.amount4})\n  }\n\n  render() {\n    return(\n      <div>\n\n        <Navbar />\n\n        <div className=\"mainContent\">\n\n          {/* Put any bootstrap elements into className=\"container\" to set max width to 960px and have it centered on page. \n              Here, Container is referenced from Grid inside the components folder. */}\n          <Container>         \n\n            <Row>\n              <Col size=\"col-md-8 offset-md-2\">\n                <h1 className=\"myCounter textCenter\"></h1>\n                <br></br>\n                <h4 className=\"textCenter\">Choose amount to withdraw:</h4>\n                <br></br>\n              </Col>\n            </Row>\n\n            <Row>\n              <Col size=\"col-md-4 offset-md-4\">\n                {/* In the following, the $ sign here is just a regular string */}\n                <button className=\"button1\" onClick={this.handleButtonClick1}>${this.state.amount1}</button>\n                <br></br>\n                <button className=\"button1\" onClick={this.handleButtonClick2}>${this.state.amount2}</button>\n                <br></br>\n                <button className=\"button1\" onClick={this.handleButtonClick3}>${this.state.amount3}</button>\n                <br></br>\n                <button className=\"button1\" onClick={this.handleButtonClick4}>${this.state.amount4}</button>\n              </Col>\n            </Row>\n\n            <br></br>\n            \n            <Row>\n              <Col size=\"col-md-8 offset-md-2\">\n                <h1 className=\"message textCenter\"></h1>\n              </Col>\n            </Row>\n\n          </Container>\n          \n        </div>\n\n        {/* Position of Navbar if the CSS position is fixed: */}\n        {/* <Navbar /> */}\n      </div>\n    )\n  }\n}\n\nexport default App;\n\n\n\n// class Header extends Component {\n\n//   constructor(props) {\n//     super(props);\n//     this.state = {favoritecolor: \"red\"};\n//   }\n\n//   componentDidMount() {\n//     setTimeout(() => {\n//       this.setState({favoritecolor: \"yellow\"})\n//     }, 2000)\n//   }\n\n//   componentDidUpdate() {\n//     document.getElementById(\"mydiv\").innerHTML =\n//     \"The updated favorite is \" + this.state.favoritecolor;\n//   }\n\n//   render() {\n//     return (\n//       <div>\n//       <h1>My Favorite Color is {this.state.favoritecolor}</h1>\n//       <div id=\"mydiv\"></div>\n//       </div>\n//     );\n//   }\n// }\n\n// export default Header;","import React, { Component } from \"react\";\nimport \"./Global.css\";\nimport Navbar from \"../components/Navbar\";\nimport { Container, Row, Col } from \"../components/Grid\";\n\n// Run \"npm i\" or \"npm i [specific component name]\" if there are any dependencies missing in the node modules folder\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {    // state is an object\n      count: 1000,\n      amount1: 100,\n      amount2: 500,\n      amount3: 1000,\n      amount4: 5000\n    }\n  }\n\n  // The componentDidMount() method is called after the component is rendered.\n  // This is where you would write any javascript to set how the page initially looks.\n  // You can also just use componentDidUpdate and not use componentDidMount() altogether.\n  componentDidMount() {\n    document.getElementsByClassName(\"myCounter\")[0].innerHTML = `You have: $${this.state.count} in your account`;   // We are using a template literal here\n  }\n\n  // The componentDidUpdate method is called after the component is updated in the DOM.\n  // This is where you would write any javascript to make changes to the page such as when a user clicks a button..\n  componentDidUpdate() {\n    document.getElementsByClassName(\"myCounter\")[0].innerHTML = `You have: $${this.state.count} in your account`;   // We are using a template literal here\n    if (this.state.count >= 10000) {\n      document.getElementsByClassName(\"message\")[0].innerHTML = \"Keep going until $50K!\";\n      document.getElementsByClassName(\"message\")[0].style.color = \"orange\";\n    }\n    if (this.state.count >= 50000) {\n      document.getElementsByClassName(\"message\")[0].innerHTML = \"You are doing well!<br />Now keep going until $100K!\";\n      document.getElementsByClassName(\"message\")[0].style.color = \"blue\";\n    }\n    if (this.state.count >= 100000) {\n      document.getElementsByClassName(\"message\")[0].innerHTML = \"YOU ARE RICH!!\";\n      document.getElementsByClassName(\"message\")[0].style.color = \"blue\";\n    }\n  }\n\n  // Here we are just declaring a regular javascript function (you can call the function anything you want)\n  handleButtonClick1 = () => {\n    this.setState({count: this.state.count + this.state.amount1})\n  }\n\n  handleButtonClick2 = () => {\n    this.setState({count: this.state.count + this.state.amount2})\n  }\n\n  handleButtonClick3 = () => {\n    this.setState({count: this.state.count + this.state.amount3})\n  }\n\n  handleButtonClick4 = () => {\n    this.setState({count: this.state.count + this.state.amount4})\n  }\n\n  render() {\n    return(\n      <div>\n\n        <Navbar />\n\n        <div className=\"mainContent\">\n\n          {/* Put any bootstrap elements into className=\"container\" to set max width to 960px and have it centered on page. \n              Here, Container is referenced from Grid inside the components folder. */}\n          <Container>         \n\n            <Row>\n              <Col size=\"col-md-8 offset-md-2\">\n                <h1 className=\"myCounter textCenter\"></h1>\n                <br></br>\n                <h4 className=\"textCenter\">Choose amount to deposit:</h4>\n                <br></br>\n              </Col>\n            </Row>\n\n            <Row>\n              <Col size=\"col-md-4 offset-md-4\">\n                {/* In the following, the $ sign here is just a regular string */}\n                <button className=\"button1\" onClick={this.handleButtonClick1}>${this.state.amount1}</button>\n                <br></br>\n                <button className=\"button1\" onClick={this.handleButtonClick2}>${this.state.amount2}</button>\n                <br></br>\n                <button className=\"button1\" onClick={this.handleButtonClick3}>${this.state.amount3}</button>\n                <br></br>\n                <button className=\"button1\" onClick={this.handleButtonClick4}>${this.state.amount4}</button>\n              </Col>\n            </Row>\n\n            <br></br>\n            \n            <Row>\n              <Col size=\"col-md-8 offset-md-2\">\n                <h1 className=\"message textCenter\"></h1>\n              </Col>\n            </Row>\n\n          </Container>\n          \n        </div>\n\n        {/* Position of Navbar if the CSS position is fixed: */}\n        {/* <Navbar /> */}\n      </div>\n    )\n  }\n}\n\nexport default App;\n\n\n\n// class Header extends Component {\n\n//   constructor(props) {\n//     super(props);\n//     this.state = {favoritecolor: \"red\"};\n//   }\n\n//   componentDidMount() {\n//     setTimeout(() => {\n//       this.setState({favoritecolor: \"yellow\"})\n//     }, 2000)\n//   }\n\n//   componentDidUpdate() {\n//     document.getElementById(\"mydiv\").innerHTML =\n//     \"The updated favorite is \" + this.state.favoritecolor;\n//   }\n\n//   render() {\n//     return (\n//       <div>\n//       <h1>My Favorite Color is {this.state.favoritecolor}</h1>\n//       <div id=\"mydiv\"></div>\n//       </div>\n//     );\n//   }\n// }\n\n// export default Header;","import React from \"react\";\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\nimport CheckingAccount from \"./pages/CheckingAccount\";\nimport SavingsAccount from \"./pages/SavingsAccount\";\n\nfunction App() {\n  return (\n    <Router>\n      <div>\n        <Switch>\n          <Route exact path=\"/\" component={CheckingAccount} />\n          <Route exact path=\"/savings\" component={SavingsAccount} />\n          {/* <Route exact path=\"/savings/:id\" component={Detail} /> */}\n        </Switch>\n      </div>\n    </Router>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n// import './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}